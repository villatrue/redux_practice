
// //store->Globalized STATE keep all state in index to access anywhere

// //Action->Increment function that creates and oobject

// const increment = () =>{
//     return {
//         type: 'INCREMENT'
//     }
// }

// const decrement = () =>{
//     return {
//         type: 'DECREMENT'
//     }
// }

// //REDUCER -> describes how actions transforms state to the next state

// const counter = (state = 0, action) => {
//     switch(action.type){
//         case "INCREMENT":
//             return state + 1;
//         case "DECREMENT":
//             return state - 1;
//     }
// };

// let store = createStore(counter);

// //Display's store in the console
// store.subscribe(()=> console.log(store.getState()));

// //DISPATCH-> execute actions to reducer

// store.dispatch(increment())